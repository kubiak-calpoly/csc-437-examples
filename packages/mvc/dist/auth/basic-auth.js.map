{
  "version": 3,
  "sources": ["../../src/auth/basic-auth.ts"],
  "sourcesContent": ["import { Request, Response } from \"express\";\nimport { verify } from \"../services/credentials\";\n\ntype NextFn = () => any;\n\nexport function basicAuth(\n  req: Request,\n  res: Response,\n  nextFn: NextFn\n) {\n  const authHeader = req.headers[\"authorization\"];\n  const match =\n    authHeader && authHeader.match(/Basic\\s+([a-zA-Z0-9]+)/i);\n\n  if (!match) {\n    console.log(\"No credentials provided in request\", req);\n    res\n      .status(401)\n      .append(\n        \"WWW-Authenticate\",\n        `Basic realm=\"${req.hostname}\", charset=\"UTF-8\"`\n      )\n      .end();\n  } else {\n    //Getting the 2nd part of the auth header (the token)\n    const [username, password] =\n      match && atob(match[1]).split(\":\");\n\n    verify(username, password)\n      .then((username) => {\n        const redactedCreds = `${username}:<REDACTED>`;\n        req.headers[\"authorization\"] = `Basic ${btoa(\n          redactedCreds\n        )}`;\n        nextFn();\n      })\n      .catch(() => res.status(403).end());\n  }\n}\n\nexport function authenticatedUser(req: Request) {\n  const authHeader = req.headers[\"authorization\"];\n  const match =\n    authHeader && authHeader.match(/Basic\\s+([a-zA-Z0-9]+)/i);\n\n  return match && atob(match[1]).split(\":\")[0];\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAAuB;AAIhB,SAAS,UACd,KACA,KACA,QACA;AACA,QAAM,aAAa,IAAI,QAAQ,eAAe;AAC9C,QAAM,QACJ,cAAc,WAAW,MAAM,yBAAyB;AAE1D,MAAI,CAAC,OAAO;AACV,YAAQ,IAAI,sCAAsC,GAAG;AACrD,QACG,OAAO,GAAG,EACV;AAAA,MACC;AAAA,MACA,gBAAgB,IAAI,QAAQ;AAAA,IAC9B,EACC,IAAI;AAAA,EACT,OAAO;AAEL,UAAM,CAAC,UAAU,QAAQ,IACvB,SAAS,KAAK,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG;AAEnC,mCAAO,UAAU,QAAQ,EACtB,KAAK,CAACA,cAAa;AAClB,YAAM,gBAAgB,GAAGA,SAAQ;AACjC,UAAI,QAAQ,eAAe,IAAI,SAAS;AAAA,QACtC;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT,CAAC,EACA,MAAM,MAAM,IAAI,OAAO,GAAG,EAAE,IAAI,CAAC;AAAA,EACtC;AACF;AAEO,SAAS,kBAAkB,KAAc;AAC9C,QAAM,aAAa,IAAI,QAAQ,eAAe;AAC9C,QAAM,QACJ,cAAc,WAAW,MAAM,yBAAyB;AAE1D,SAAO,SAAS,KAAK,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;AAC7C;",
  "names": ["username"]
}
