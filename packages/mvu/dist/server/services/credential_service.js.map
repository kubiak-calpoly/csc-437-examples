{
  "version": 3,
  "sources": ["../../../src/server/services/credential_service.ts"],
  "sourcesContent": ["import bcrypt from \"bcryptjs\";\nimport credentialModel from \"./mongo/credential\";\nimport { Credential } from \"../../models/Credential\";\n\nexport function verify(\n  username: string,\n  password: string\n): Promise<String> {\n  return new Promise<String>((resolve, reject) => {\n    credentialModel\n      .find({ username })\n      .then((found) => {\n        if (found && found.length === 1) {\n          return found[0].toObject();\n        } else {\n          reject(\"Invalid username or password\");\n        }\n      })\n      .then((credsOnFile) => {\n        if (credsOnFile) {\n          return bcrypt.compare(\n            password,\n            credsOnFile.hashedPassword\n          );\n        } else {\n          reject(\"Invalid username or password\");\n        }\n      })\n      .then((matched) => {\n        if (matched) {\n          resolve(username);\n        } else {\n          reject(\"Invalid username or password\");\n        }\n      });\n  });\n}\n\nexport function checkExists(username: string) {\n  return new Promise<boolean>((resolve, reject) => {\n    credentialModel\n      .find({ username })\n      .then((found) => resolve(found && found.length === 1));\n  });\n}\n\nexport function create(username: string, password: string) {\n  return new Promise<string>((resolve, reject) => {\n    if (!username || !password) {\n      reject(\"must provide username and password\");\n    }\n    credentialModel\n      .find({ username })\n      .then((found) => {\n        if (found) reject(\"username exists\");\n      })\n      .then(() =>\n        bcrypt\n          .genSalt(10)\n          .then((salt) => bcrypt.hash(password, salt))\n          .then((hashedPassword) => {\n            const creds = new credentialModel({\n              username,\n              hashedPassword\n            });\n            creds.save().then((created) => {\n              if (created) resolve(created.toObject());\n            });\n          })\n      );\n  });\n}\n\nexport default { checkExists, create, verify };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmB;AACnB,wBAA4B;AAGrB,SAAS,OACd,UACA,UACiB;AACjB,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,sBAAAA,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAU;AACf,UAAI,SAAS,MAAM,WAAW,GAAG;AAC/B,eAAO,MAAM,CAAC,EAAE,SAAS;AAAA,MAC3B,OAAO;AACL,eAAO,8BAA8B;AAAA,MACvC;AAAA,IACF,CAAC,EACA,KAAK,CAAC,gBAAgB;AACrB,UAAI,aAAa;AACf,eAAO,gBAAAC,QAAO;AAAA,UACZ;AAAA,UACA,YAAY;AAAA,QACd;AAAA,MACF,OAAO;AACL,eAAO,8BAA8B;AAAA,MACvC;AAAA,IACF,CAAC,EACA,KAAK,CAAC,YAAY;AACjB,UAAI,SAAS;AACX,gBAAQ,QAAQ;AAAA,MAClB,OAAO;AACL,eAAO,8BAA8B;AAAA,MACvC;AAAA,IACF,CAAC;AAAA,EACL,CAAC;AACH;AAEO,SAAS,YAAY,UAAkB;AAC5C,SAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,sBAAAD,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAU,QAAQ,SAAS,MAAM,WAAW,CAAC,CAAC;AAAA,EACzD,CAAC;AACH;AAEO,SAAS,OAAO,UAAkB,UAAkB;AACzD,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,QAAI,CAAC,YAAY,CAAC,UAAU;AAC1B,aAAO,oCAAoC;AAAA,IAC7C;AACA,sBAAAA,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAU;AACf,UAAI;AAAO,eAAO,iBAAiB;AAAA,IACrC,CAAC,EACA;AAAA,MAAK,MACJ,gBAAAC,QACG,QAAQ,EAAE,EACV,KAAK,CAAC,SAAS,gBAAAA,QAAO,KAAK,UAAU,IAAI,CAAC,EAC1C,KAAK,CAAC,mBAAmB;AACxB,cAAM,QAAQ,IAAI,kBAAAD,QAAgB;AAAA,UAChC;AAAA,UACA;AAAA,QACF,CAAC;AACD,cAAM,KAAK,EAAE,KAAK,CAAC,YAAY;AAC7B,cAAI;AAAS,oBAAQ,QAAQ,SAAS,CAAC;AAAA,QACzC,CAAC;AAAA,MACH,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACH;AAEA,IAAO,6BAAQ,EAAE,aAAa,QAAQ,OAAO;",
  "names": ["credentialModel", "bcrypt"]
}
