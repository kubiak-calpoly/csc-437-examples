{
  "version": 3,
  "sources": ["../../../src/server/utils/errorHandler.ts"],
  "sourcesContent": ["import { NextFunction, Request, Response } from \"express\";\nimport { HTTPError } from \"./HTTPError\";\n\nclass ErrorHandler {\n  private isHTTPError(error: Error): boolean {\n    return error instanceof HTTPError;\n  }\n\n  public handleError(\n    error: Error | HTTPError,\n    response?: Response\n  ): void {\n    if (error instanceof HTTPError && response) {\n      this.handleHTTPError(error as HTTPError, response);\n    } else {\n      this.handleCriticalError(error, response);\n    }\n  }\n\n  handleHTTPError(error: HTTPError, res: Response) {\n    res\n      .status(error.statusCode)\n      .send(\n        `<h1>HTTP Error (${error.statusCode})</h1><p>${error.message}</p>`\n      );\n    console.log(\n      `HTTP Error (${error.statusCode})`,\n      error.message\n    );\n  }\n\n  handleCriticalError(error: Error, res?: Response) {\n    if (res) {\n      res.status(500).send(error.message);\n    } else {\n      console.log(\"Application Error\", error.message);\n    }\n  }\n}\n\nexport const errorHandler = new ErrorHandler();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAA0B;AAE1B,MAAM,aAAa;AAAA,EACT,YAAY,OAAuB;AACzC,WAAO,iBAAiB;AAAA,EAC1B;AAAA,EAEO,YACL,OACA,UACM;AACN,QAAI,iBAAiB,8BAAa,UAAU;AAC1C,WAAK,gBAAgB,OAAoB,QAAQ;AAAA,IACnD,OAAO;AACL,WAAK,oBAAoB,OAAO,QAAQ;AAAA,IAC1C;AAAA,EACF;AAAA,EAEA,gBAAgB,OAAkB,KAAe;AAC/C,QACG,OAAO,MAAM,UAAU,EACvB;AAAA,MACC,mBAAmB,MAAM,UAAU,YAAY,MAAM,OAAO;AAAA,IAC9D;AACF,YAAQ;AAAA,MACN,eAAe,MAAM,UAAU;AAAA,MAC/B,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,oBAAoB,OAAc,KAAgB;AAChD,QAAI,KAAK;AACP,UAAI,OAAO,GAAG,EAAE,KAAK,MAAM,OAAO;AAAA,IACpC,OAAO;AACL,cAAQ,IAAI,qBAAqB,MAAM,OAAO;AAAA,IAChD;AAAA,EACF;AACF;AAEO,MAAM,eAAe,IAAI,aAAa;",
  "names": []
}
