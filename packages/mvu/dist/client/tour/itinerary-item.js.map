{
  "version": 3,
  "sources": ["../../../src/client/tour/itinerary-item.ts"],
  "sourcesContent": ["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { reset, elements } from \"../shared/css-base\";\n\n@customElement(\"itinerary-item\")\nexport class ItineraryItem extends LitElement {\n  @property()\n  startDate: Date = new Date();\n\n  @property()\n  endDate: Date = new Date();\n\n  @property({ attribute: \"item-class\" })\n  itemClass: string = \"transportation\";\n\n  @property()\n  handleToggle = (_: boolean) => {};\n\n  @property({ reflect: true, type: Boolean })\n  open: boolean = false;\n\n  @property({ reflect: true, type: Boolean })\n  hidden: boolean = false;\n\n  render() {\n    return html` <span id=\"dates\">\n        <time datetime=${this.startDate}>\n          ${formatDate(this.startDate)}\n        </time>\n        ${this.endDate && this.endDate > this.startDate\n          ? html`\n              <time datetime=${this.endDate}>\n                ${formatDate(this.endDate)}\n              </time>\n            `\n          : null}\n      </span>\n      <details\n        id=\"details\"\n        name=\"itin\"\n        ${open}\n        @toggle=\"${(event: ToggleEvent) =>\n          this.handleToggle(event.newState === \"open\")}\">\n        <summary>\n          <slot name=\"summary\"></slot>\n        </summary>\n        <slot></slot>\n      </details>`;\n  }\n\n  static styles = [\n    reset,\n    elements,\n    css`\n      :host {\n        display: contents;\n      }\n      :host([hidden]) {\n        display: none;\n      }\n      #dates {\n        color: var(--color-accent);\n        font-family: var(--font-family-display);\n        font-weight: bold;\n        grid-column: start;\n      }\n      #dates time {\n        white-space: nowrap;\n      }\n      #dates time + time::before {\n        display: inline-block;\n        content: \" \u2013 \";\n      }\n      details {\n        padding: var(--size-spacing-medium);\n        display: contents;\n      }\n      details.destination > summary,\n      details.destination > ::slotted(*) {\n        grid-column: header;\n      }\n      ::slotted(ul) {\n        list-style: none;\n        padding: 0;\n        align-self: end;\n      }\n      summary {\n        position: relative;\n        padding-bottom: var(--size-spacing-large);\n        padding-left: calc(\n          var(--size-icon-large) + var(--size-spacing-medium)\n        );\n        list-style: none;\n        grid-column: header / end;\n        min-height: calc(\n          var(--size-icon-large) + var(--size-spacing-large)\n        );\n      }\n      details > summary::before {\n        content: url('data:image/svg+xml;utf8,<svg viewBox=\"0 0 1200 1200\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"rgb(42 143 42)\"><path d=\"m624 300h-48v336h-134.88l158.88 317.64 158.88-317.64h-134.88zm-24 546.36-81.121-162.36h162.24z\"/></svg>');\n        position: absolute;\n        height: 2rem;\n        width: 2rem;\n        bottom: 0;\n        right: 0;\n        color: var(--color-accent);\n        transform: rotate(0);\n        transition: transform 0.5s;\n      }\n      details[open] > summary::before {\n        transform: rotate(180deg);\n      }\n    `\n  ];\n}\n\n//  static handleToggle = effect(function (event) {\n//     const markerId = this.getAttribute(\"marker\");\n//     const isOpen = event.newState === \"open\";\n//\n//     console.log(\"Toggled\", markerId);\n//     if (markerId) {\n//       const marker = document.getElementById(markerId);\n//\n//       if (marker) {\n//         if (isOpen) marker.setAttribute(\"selected\", \"selected\");\n//         else marker.removeAttribute(\"selected\");\n//       }\n//     }\n//   });\n\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\"\n];\n\nfunction formatDate(dt: Date) {\n  const m = months[dt.getUTCMonth()];\n  const d = dt.getUTCDate();\n\n  return `${d} ${m}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsC;AACtC,wBAAwC;AACxC,sBAAgC;AAGzB,IAAM,gBAAN,cAA4B,sBAAW;AAAA,EAAvC;AAAA;AAEL,qBAAkB,oBAAI,KAAK;AAG3B,mBAAgB,oBAAI,KAAK;AAGzB,qBAAoB;AAGpB,wBAAe,CAAC,MAAe;AAAA,IAAC;AAGhC,gBAAgB;AAGhB,kBAAkB;AAAA;AAAA,EAElB,SAAS;AACP,WAAO;AAAA,yBACc,KAAK,SAAS;AAAA,YAC3B,WAAW,KAAK,SAAS,CAAC;AAAA;AAAA,UAE5B,KAAK,WAAW,KAAK,UAAU,KAAK,YAClC;AAAA,+BACmB,KAAK,OAAO;AAAA,kBACzB,WAAW,KAAK,OAAO,CAAC;AAAA;AAAA,gBAG9B,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,UAKN,IAAI;AAAA,mBACK,CAAC,UACV,KAAK,aAAa,MAAM,aAAa,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpD;AAkEF;AA7Ga,cA6CJ,SAAS;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4DF;AA1GA;AAAA,MADC,4BAAS;AAAA,GADC,cAEX;AAGA;AAAA,MADC,4BAAS;AAAA,GAJC,cAKX;AAGA;AAAA,MADC,4BAAS,EAAE,WAAW,aAAa,CAAC;AAAA,GAP1B,cAQX;AAGA;AAAA,MADC,4BAAS;AAAA,GAVC,cAWX;AAGA;AAAA,MADC,4BAAS,EAAE,SAAS,MAAM,MAAM,QAAQ,CAAC;AAAA,GAb/B,cAcX;AAGA;AAAA,MADC,4BAAS,EAAE,SAAS,MAAM,MAAM,QAAQ,CAAC;AAAA,GAhB/B,cAiBX;AAjBW,gBAAN;AAAA,MADN,iCAAc,gBAAgB;AAAA,GAClB;AA8Hb,MAAM,SAAS;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,SAAS,WAAW,IAAU;AAC5B,QAAM,IAAI,OAAO,GAAG,YAAY,CAAC;AACjC,QAAM,IAAI,GAAG,WAAW;AAExB,SAAO,GAAG,CAAC,IAAI,CAAC;AAClB;",
  "names": []
}
