{
  "version": 3,
  "sources": ["../../../src/client/tour/itinerary-view.ts"],
  "sourcesContent": ["import { css, html, svg, LitElement } from \"lit\";\nimport {\n  customElement,\n  state,\n  property\n} from \"lit/decorators.js\";\nimport { consume } from \"@lit/context\";\nimport moment from \"moment\";\nimport type {\n  Tour,\n  Destination,\n  Transportation,\n  TransportationType,\n  Segment\n} from \"../../models/Tour\";\nimport { reset, elements } from \"../shared/css-base\";\nimport \"./itinerary-item\";\nimport tourContext from \"./tour-context\";\nimport \"./tour-link\";\n\n@customElement(\"itinerary-view\")\nexport class ItineraryView extends LitElement {\n  @consume({ context: tourContext, subscribe: true })\n  @property({ attribute: false })\n  tour: Tour = {\n    id: \"not_a_tour\",\n    name: \"Unnamed\",\n    destinations: [],\n    transportation: [],\n    startDate: new Date(),\n    endDate: new Date(),\n    entourage: []\n  } as Tour;\n\n  @property()\n  startDate: Date = new Date();\n\n  @property()\n  selectedDate: Date | undefined;\n\n  @property()\n  handleDestinationToggle = (\n    open: boolean,\n    d: Destination\n  ) => {};\n\n  render() {\n    console.log(\n      \"Rendering itinerary-view for tour\",\n      this.tour.startDate,\n      this.tour.destinations,\n      this.tour.transportation\n    );\n\n    const transportation = this.tour.transportation;\n    const startDates = this.tour.destinations\n      .map((dst) => dst.nights)\n      .reduce(\n        (acc, nights, i) =>\n          acc.concat([\n            new Date(\n              acc[i].getTime() + nights * (24 * 60 * 60 * 1000)\n            )\n          ]),\n        [new Date(this.tour.startDate)]\n      );\n\n    const destinationView = (dst: Destination, i: number) => {\n      const startDate = startDates[i];\n      const nights = dst.nights;\n      const endDate: Date = new Date(\n        startDate.getTime() + nights * (24 * 60 * 60 * 1000)\n      );\n      const hidden =\n        this.selectedDate &&\n        (this.selectedDate.getTime() < startDate.getTime() ||\n          this.selectedDate.getTime() > endDate.getTime());\n      const open = !hidden;\n\n      return html`\n        <itinerary-item\n          item-class=\"destination\"\n          .startDate=${startDate}\n          .endDate=${endDate}\n          ?hidden=${hidden}\n          ?open=${open}\n          .handleToggle=${(open: boolean) =>\n            this.handleDestinationToggle(open, dst)}>\n          <h3 slot=\"summary\">\n            <tour-link\n              href=\"/tour/${this.tour.id}/destination/${i}\">\n              ${dst.name}\n            </tour-link>\n          </h3>\n          <p slot=\"summary\">\n            ${nights} night${nights === 1 ? \"\" : \"s\"}\n          </p>\n          <img class=\"featured\" src=\"${dst.featuredImage}\" />\n        </itinerary-item>\n      `;\n    };\n\n    const segmentView = (seg: Segment) => {\n      const depMoment = moment(seg.departure.time);\n      const arrMoment = moment(seg.arrival.time);\n\n      return html`\n        <h4\n          >${[seg.provider, seg.name]\n            .filter(Boolean)\n            .join(\" \")}</h4\n        >\n        <dl class=\"timings\">\n          <dt>Depart</dt>\n          <dd>${seg.departure.station}</dd>\n          <dd>\n            <time datetime=\"${depMoment.format()}\">\n              ${depMoment.format(\"h:mm A\")}\n            </time>\n          </dd>\n          <dt>Arrive</dt>\n          <dd>${seg.arrival.station}</dd>\n          <dd>\n            <time datetime=\"${arrMoment.format()}\">\n              ${arrMoment.format(\"h:mm A\")}\n            </time>\n          </dd>\n        </dl>\n      `;\n    };\n\n    const transportationView = (trn: Transportation) => {\n      const startDate = new Date(trn.startDate);\n      const endDate = trn.endDate\n        ? new Date(trn.endDate)\n        : startDate;\n      const icon = iconForTransportation(trn.type);\n      const hidden =\n        this.selectedDate &&\n        (this.selectedDate.getTime() < startDate.getTime() ||\n          this.selectedDate.getTime() > endDate.getTime());\n\n      return html`\n        <itinerary-item\n          item-class=\"transportation\"\n          .startDate=${startDate}\n          .endDate=${endDate}\n          ?hidden=${hidden}>\n          <h3 slot=\"summary\">\n            <svg class=\"icon\">${icon}</svg>\n          </h3>\n          ${trn.segments.map(segmentView)}\n        </itinerary-item>\n      `;\n    };\n\n    return html`\n      <section class=\"itinerary\">\n        ${this.tour.destinations.flatMap((d, i) =>\n          i < transportation.length\n            ? [\n                destinationView(d, i),\n                transportationView(transportation[i])\n              ]\n            : destinationView(d, i)\n        )}\n      </section>\n    `;\n  }\n\n  static styles = [\n    reset,\n    elements,\n    css`\n      .itinerary {\n        display: grid;\n        grid-area: itinerary;\n        align-self: start;\n        grid-template-columns: [start] auto [header info] 1fr 2fr 1fr 2fr [end];\n        gap: var(--size-spacing-large)\n          var(--size-spacing-medium);\n        align-items: baseline;\n        margin: var(--size-spacing-small);\n      }\n\n      svg.icon {\n        display: inline;\n        height: 4rem;\n        width: 4rem;\n        vertical-align: middle;\n        fill: currentColor;\n      }\n\n      itinerary-item ol,\n      itinerary-item ol > li {\n        display: contents;\n      }\n\n      itinerary-item h4 {\n        grid-column: info/end;\n        text-align: center;\n      }\n\n      itinerary-item[item-class=\"destination\"] h3 {\n        font-style: normal;\n        font-weight: bold;\n      }\n\n      itinerary-item img.featured {\n        width: 100%;\n        grid-column: info / end;\n        grid-row-end: span 2;\n      }\n\n      .timings {\n        display: grid;\n        grid-column: info / end;\n        grid-template-columns: 1fr 2fr 1fr 2fr;\n        grid-template-columns: subgrid;\n        grid-auto-flow: column dense;\n        align-items: baseline;\n        gap: var(--size-spacing-small) var(--size-spacing-large);\n      }\n\n      .timings > dt {\n        /* Depart / Arrive */\n        grid-row: 2;\n        color: inherit;\n      }\n\n      .timings > dt + dd {\n        /* City / Airport / Station */\n        grid-column-end: span 2;\n        font-family: var(--font-family-display);\n        font-weight: bold;\n      }\n\n      .timings > dt + dd + dd {\n        /* Time */\n        grid-row: 2;\n        white-space: nowrap;\n      }\n    `\n  ];\n}\n\nfunction iconForTransportation(type: TransportationType) {\n  const hash: { [key in TransportationType]: String } = {\n    air: \"icon-airplane\",\n    rail: \"icon-train\",\n    ship: \"icon-ship\",\n    bus: \"icon-bus\"\n  };\n\n  return svg`\n    <use href=\"/icons/transportation.svg#${hash[type]}\" />\n    `;\n}\n"],
  "mappings": "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",
  "names": ["open", "moment", "tourContext"]
}
